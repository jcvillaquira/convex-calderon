// Transform a matrix into a dense array.
func real[int, int] matrix2array(matrix M) {
  real[int, int] A(M.n, M.n);
  for (int j = 0; j < M.n; j++) {
    for (int k = 0; k < M.n; k++) {
      A(j, k) = M(j, k);
    }
  }
  return A;
}

// Computes the trace of an n times n matrix A.
func real tr(matrix A) {
  real trc = 0.0;
  for (int j = 0; j < A.n; j++) {
    trc += A(j, j);
  }
  return trc;
}

// Computes the gradient the scalar bound barrier function.
func real[int] gradbound(real[int] x, real bound) {
  real[int] dbound(x.n);
  for (int j = 0; j < x.n; j++) {
    dbound[j] = - 1.0 / ( x[j] - bound );
  }
  return dbound;
}

// Computes the gradient the SDP bound barrier function.
macro gradsdp(u, grad, Fx, Fxr) {
  Vh[int] dxu( u.n ), dyu( u.n );
  for (int j = mpirank; j < u.n; j += mpisize){
    dxu[j] = dx( u[j] );
    dyu[j] = dy( u[j] );
  }
  for (int j = 0; j < u.n; j++ ){
    int rnk = j % mpisize;
    broadcast(processor(rnk), dxu[j][]);
    broadcast(processor(rnk), dyu[j][]);
  }
  Vh[int] Dxu( u.n ^ 2 ), Dyu( u.n ^ 2 );
  for (int idx = mpirank; idx <= ( u.n + 1 ) * ( u.n - 1 ) ; idx += mpisize) {
    int j = idx / ( u.n );
    int k = idx % ( u.n );
    if ( k >= j ) {
      Dxu[idx] = dxu[j] * dxu[k];
      Dyu[idx] = dyu[j] * dyu[k];
    }
  }
  for (int idx = 0; idx <= ( u.n + 1 ) * ( u.n - 1 ) ; idx++ ) {
    int rnk = idx % mpisize;
    broadcast(processor(rnk), Dxu[idx][]);
    broadcast(processor(rnk), Dyu[idx][]);
  }
  mpiBarrier(mpiCommWorld);
  matrix diffm = Fxr - Fx;
  real[int, int] diffa = matrix2array(diffm);
  real[int, int] diffainv = diffa ^ -1;
  matrix diffminv = diffainv;
  for (int i = mpirank; i < 6; i += mpisize) {
    matrix di(u.n, u.n);
    for (int j = 0; j < u.n; j++){
      for (int k = 0; k < u.n; k++){
        di(j, k) = 0.0;
        if ( k >= j ){
          int idx = u.n * j + k;
          di(j, k) = -int2d(Th)( masks[i] * ( Dxu[idx] + Dyu[idx] ));
        } else {
          di(j, k) = di(k, j);
        }
      }
    }
    matrix totrace = diffminv * di;
    grad[i] = tr(totrace);
  }
  for (int i = 0; i < 6; i++ ) {
    int rnk = i % mpisize;
    broadcast(processor(rnk), grad[i]);
  }
} //
