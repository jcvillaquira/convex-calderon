// Computes the gradient the scalar bound barrier function.
func real[int] gradbound(real[int] x, real bound) {
  real[int] dbound(x.n);
  for (int i = 0; i < x.n; i++) {
    dbound[i] = - 1.0 / ( x[i] - bound );
  }
  return dbound;
}

// Computes the gradient the SDP bound barrier function.
macro gradsdp(u, grad, Fx, Fxr) {
  matrix diffm = Fxr - Fx;
  real[int, int] diffa = matrix2array(diffm);
  real[int, int] diffainv = diffa ^ -1;
  matrix diffminv = diffainv;
  matrix dm(u.n, u.n);
  for (int m = mincoord + mpirank; m <= maxcoord; m += mpisize) {
    for (int k = 0; k < u.n; k++) {
      real[int] temp = B[m] * u[k][];
      for (int i = 0; i < u.n; i++) {
        if ( i >= k ) {
          dm(k, i) = u[i][]' * temp;
        } else {
          dm(k, i) = dm(i, k);
        }
      }
    }
    matrix totrace = diffminv * dm;
    grad[m] = tr(totrace);
  }
  for (int m = mincoord; m <= maxcoord; m++ ) {
    int rnk = ( m - mincoord ) % mpisize;
    broadcast(processor(rnk), grad[m]);
  }
} //
