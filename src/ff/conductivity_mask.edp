// Generate masks.
Vh[int] masks(6);
Vh theta = pi - atan2(y, -x);
real dtheta = pi / 3;
real eps = 1e-3;
for (int j = 0; j < 6; j++){
  real sj = getARGV("-s" + j, 1.0);
  masks[j] = ( j * dtheta - eps <= theta) * (theta < ( j + 1 ) * dtheta - eps);
}

// Generate function from vector.
func real[int] vec2cond(real[int] x) {
  Vh s = 0.0;
  for (int j = 0; j < 6; j++) {
    s = s + masks[j] * x[j];
  }
  return s[];
}
