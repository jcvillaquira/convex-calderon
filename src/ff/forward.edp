// Surface integral.
varf as(u, v) = int1d(Th, D - 1)( u * v );
matrix As = as(Vh, Vh);
real[int] asvec(Vh.ndof);

// Computes the variational form of sigma with sigma[] = s.
func matrix varform(real[int] s) {
  Vh sigma;
  sigma[] = s;
  varf a(u, v) = int2d(Th)( sigma * ( dx(u)*dx(v) + dy(u)*dy(v) ) );
  matrix A = a(Vh, Vh);
  return A;
}

// Macro to compute solutions.
macro computesols(A, sols) {
  for (int i = mpirank; i < bcs.n; i += mpisize) {
    varf l(unused, v) = int1d(Th, D-1)( bcs[i] * v );
    real[int] f = l(0, Vh);
    sols[i][] = A^-1 * f;
  }
  for (int i = 0; i < bcs.n; i++) {
    int rnk = i % mpisize;
    broadcast(processor(rnk), sols[i][]);
  }
} //

// Compute the image of xr under the forward map.
macro forward(ntd, u) {
  for (int i = 0; i < u.n; i++) {
    for (int k = 0; k < u.n; k++) {
      if ( k >= i ){
        asvec = As * bcs[k][];
        ntd(i, k) = u[i][]' * asvec;
      } else {
        ntd(i, k) = ntd(k, i);
      }
    }
  }
} //
