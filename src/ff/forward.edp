// Computes the variational form of sigma with sigma[] = s.
func matrix varform(real[int] s) {
  Vh sigma;
  sigma[] = s;
  varf a(u, v) = int2d(Th)( sigma * ( dx(u)*dx(v) + dy(u)*dy(v) ) );
  matrix A = a(Vh, Vh);
  return A;
}

// Macro to compute solutions.
macro computesols(A, sols) {
  for (int j = 0; j < sols.n; j++) {
    varf l(unused, v) = int1d(Th, D-1)( bcs[j] * v );
    real[int] f = l(0, Vh);
    sols[j][] = A^-1 * f;
  }
} //

// Compute the image of xr under the forward map.
macro forward(ntd, u) {
  for (int j = 0; j < u.n; j++) {
    for (int k = 0; k < u.n; k++) {
      if ( k >= j ){
        ntd(j, k) = int1d(Th, D - 1)( u[j] * bcs[k] );
      } else {
        ntd(j, k) = ntd(k, j);
      }
    }
  }
} //
