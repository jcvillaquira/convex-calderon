// Imports.
include "getARGV.idp"
load "lapack"

// Load parameters.
int D = getARGV("-D", 20);
int nbc = getARGV("-bc", 20);
int J = getARGV("-J", 10);
int N = getARGV("-N", 10);
real alpha0 = getARGV("-alpha0", 0.01);
real a = getARGV("-a", 0.5);
real b = getARGV("-b", 2.0);
real dev = getARGV("-dev", 0);
real dw = getARGV("-dw", 0.01);
real w = 0.0;

// Load the mesh.
mesh Th = readmesh("mesh/Th1_" + D + ".msh");
fespace Vh(Th, P1);

// Select saving file.
ofstream file("output.txt", append);

// Include additional scripts.
include "src/ff/boundary_basis.edp"
include "src/ff/conductivity_mask.edp"
include "src/ff/forward.edp"
include "src/ff/barrier.edp"

// Load real and starting point.
real[int] x0(6), xr(6);
for (int j = 0; j < 6; j++){
  xr[j] = getARGV("-xr" + j, 1.0);
  x0[j] = getARGV("-x0" + j, 0.9 * b);
}
Vh sr, s0;
sr[] = vec2cond(xr);

// Compute forward evaluation at xr.
matrix Ar = varform(sr[]);
set(Ar, solver = sparsesolver);
Vh[int] ur( 2 * nbc );
matrix Fxr( 2 * nbc, 2 * nbc );
computesols(Ar, ur);
forward(Fxr, ur);

// Create the weight.
real[int] c(6);
for (int j = 0; j < c.n; j++) {
  c[j] = 1.0;
}

string opt = "" + x0[0];
for (int j = 1; j < x0.n; j++){
  opt = opt + "," + x0[j];
}
if (mpirank == 0){
  file << opt << endl;
}

// Apply interior point method.
mpiBarrier(mpiCommWorld);
for (int n = 0; n < N; n++) {
  if (mpirank == 0 && dev == 1) {
    cout << "Iteration " << n << " / " << N << endl;
  }
  if ( n == 1 ) {
    w = getARGV("-w", 1.0);
  } else if ( n > 1 ) {
    w *= 1 + dw;
  }
  for (int j = 0; j < J; j++) {
    s0[] = vec2cond(x0);
    matrix A0 = varform(s0[]);
    set(A0, solver = sparsesolver);
    Vh[int] u0( 2 * nbc );
    matrix Fx0( 2 * nbc, 2 * nbc );
    computesols(A0, u0);
    forward(Fx0, u0);
    real[int] dsdp(6);
    gradsdp(u0, dsdp, Fx0, Fxr);
    real[int] dbnd = gradbound(x0, a) + gradbound(x0, b);
    real[int] grad = dbnd + dsdp;
    grad += w * c;
    real alpha = alpha0 / (w + 1);
    x0 = x0 - alpha * grad;
  }
  opt = "" + x0[0];
  for (int j = 1; j < x0.n; j++){
    opt = opt + "," + x0[j];
  }
  if (mpirank == 0){
    file << opt << endl;
  }
}

