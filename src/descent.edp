// Imports.
include "getARGV.idp"
load "lapack"

// Load parameters.
int D = getARGV("-D", 5);
int bc = getARGV("-bc", 10);
int J = getARGV("-J", 10);
int N = getARGV("-N", 10);
real alpha0 = getARGV("-alpha0", 0.0005);
real a = getARGV("-a", 0.2);
real b = getARGV("-b", 2.0);
real dev = getARGV("-dev", 0);
real dw = getARGV("-dw", 0.0005);
real w = 0.0;

// Load the mesh.
mesh Th = readmesh("mesh/Th1_" + D + ".msh");
fespace Vh(Th, P1);

// Load original and starting conductivity.
Vh sr, tmp = 0.0;
{
  ifstream fl("mesh/sigma" + D);
  fl >> sr[];
}
Vh s0 = 0.9 * b;

// Include additional scripts.
include "src/ff/boundary_basis.edp"
include "src/ff/conductivity_mask.edp"
include "src/ff/forward.edp"
include "src/ff/gradient.edp"
include "src/ff/errors.edp"

// Compute forward evaluation at xr.
matrix Ar = varform(sr[]);
set(Ar, solver = sparsesolver);
Vh[int] ur( 2 * bc );
matrix Fxr(ur.n , ur.n);
computesols(Ar, ur);
forward(Fxr, ur);

// Create the weight.
real[int] d(Vh.ndof);
{
  ifstream fl("mesh/grad" + D);
  fl >> d;
}
real[int] c(Vh.ndof);
c = 1;
d = - 3 / d;
d = d / Vh.ndof;
Vh dd;
dd[] = d;

// TODO: Output process.
mpiBarrier(mpiCommWorld);
real lmax = 100.0;
plot(s0, wait = false, fill = true, value = true, nbiso = 100);
for (int n = 0; n < N; n++) {
  if (mpirank == 0 && dev == 1) {
    cout << "Iteration " << n << " / " << N << endl;
  }
  if ( n == 1 ) {
    w = getARGV("-w", 1.0);
  } else if ( n > 1 ) {
    w *= 1 + dw;
  }
  for (int j = 0; j < J; j++) {
    matrix A0 = varform(s0[]);
    set(A0, solver = sparsesolver);
    Vh[int] u0(ur.n);
    computesols(A0, u0);
    matrix Fx0(u0.n, u0.n);
    forward(Fx0, u0);
    real[int] dsdp(Vh.ndof);
    gradsdp(u0, dsdp, Fx0, Fxr);
    real[int] dbnd = gradbound(s0[], a) + gradbound(s0[], b);
    Vh tmp2;
    tmp2[] = dsdp;
    Vh tmp3 = tmp2 * dd;
    dsdp = tmp3[];
    real[int] grad = dbnd + dsdp;
    grad += w * c;
    real alpha = alpha0 / (w + 1);
    s0[] = s0[] - alpha * grad;
    // TODO: Output process.
  }
  real delta = 0.0;
  l2relative(s0, sr, delta);
  if ( delta < lmax ) {
    lmax = delta;
    cout << n << endl;
    cout << lmax << endl;
    plot(s0, wait = false, fill = true, value = false, boundary = false, nbiso = 100, ps = "convexresult.eps");
  }
}

