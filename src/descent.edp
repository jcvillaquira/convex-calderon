// Imports.
include "params.edp";

// Additional parameters.
int J = getARGV("-J", 10);
real alpha0 = getARGV("-alpha0", 0.1);
real dw = getARGV("-dw", 0.0001);
int mincoord = getARGV("-mincoord", 0);
int maxcoord = getARGV("-maxcoord", N - 1);

// Load the mesh.
mesh Th = readmesh("mesh/Th1_" + D + ".msh");
fespace Vh(Th, P1);

// Include additional scripts.
include "src/ff/boundary_basis.edp"
include "src/ff/conductivity_mask.edp"
include "src/ff/forward.edp"
include "src/ff/utils.edp"
include "src/ff/gradient.edp"
include "src/ff/errors.edp"

// Load original and starting conductivity.
real[int] x0(N), xr(N), c(N);
for (int j = 0; j < N; j++){
  xr[j] = getARGV("-xr" + j, 1.0);
  x0[j] = getARGV("-x0" + j, 0.9 * b);
  c[j] = getARGV("-c" + j, 1.0);
}

// Define variables.
Vh[int] u( 2 * bc );
Vh s0, sr = vec2cond(xr);

// Compute forward evaluation at xr.
matrix A = varform(sr[]);
set(A, solver = sparsesolver);
matrix Fxr(u.n, u.n);
computesols(A, u);
forward(Fxr, u);

// Central path parameters.
real[int] w(niter);
w[0] = 0.0;
w[1] = getARGV("-w", 500.0);
for (int n = 2; n < w.n; n++) {
  w[n] = ( 1 + dw ) * w[n-1];
}

// Visualization parameters.
real[int] viso(100);
for (int j = 0; j < viso.n; j++) {
  viso[j] = a + j * ( b - a ) / ( viso.n - 1 );
}

// Interior point method preliminaries.
mpiBarrier(mpiCommWorld);
matrix Fx0(u.n, u.n);
matrix dFx(u.n, u.n);
real[int] grad(N);

// Apply interior point method.
for (int n = 0; n < niter; n++) {
  real[int] x0bk = x0;
  for (int j = 0; j < J; j++) {
    s0[] = vec2cond(x0);
    A = varform(s0[]);
    set(A, solver = sparsesolver);
    computesols(A, u);
    forward(Fx0, u);
    gradsdp(u, grad, Fx0, Fxr);
    grad += w[n] * c;
    real alpha = alpha0 / ( w[n] + 1 );
    for (int l = mincoord; l <= maxcoord; l++) {
      x0[l] = min(x0[l] - alpha * grad[l], b);
    }
  }
  dFx = Fx0 - Fxr;
  bool cont = feasible(dFx);
  if (cont) {
    real delta = 0.0;
    l2vector(xr, x0, delta);
    real cx = c' * x0 - c' * xr;
    if ( mpirank == 0 && dev == 0 ) {
      ofstream file("temp/" + conf + ".txt", append);
      file << n << ",";
      for (int j = 0; j < N; j++){
        file << x0[j] << ",";
      }
      file << delta << "," << cx << endl;
    }
  } else {
    alpha0 = 0.8 * alpha0;
    if (mpirank == 0) {
      cout << "alpha0 <- " << alpha0 << " at iteration " << n << "." << endl;
    }
    x0 = x0bk;
    n = n - 1;
  }
}

