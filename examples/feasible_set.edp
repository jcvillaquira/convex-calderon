// Compute the feasible set.

// Imports.
include "params.edp";

// Load mesh.
string meshname = "Th" + R + "_" + D + ".msh";
mesh Th = readmesh("mesh/" + meshname);
fespace Vh(Th, P1);

// Load masks.
Vh[int] masks(N);
real[int] srv(N);
Vh sr;
for (int j = 0; j < N;  j++) {
  string pathmask = "mesh/" + conf + "/" + N + "_" + ( j + 1 ) + ".txt";
  ifstream msk(pathmask);
  msk >> masks[j][];
  srv[j] = getARGV("-srv" + ( j + 1 ), 1.0);
  sr[] += srv[j] * masks[j][];
}

// Generate points in space.
real[int] pos(disc);
for (int j = 0; j < pos.n; j++) {
  pos[j] = a + ( b - a ) * j / (pos.n - 1);
}

// Load boundary conditions and forward map.
include "src/ff/boundary_basis.edp";
include "src/ff/forward.edp";

// Compute evaluation.
matrix Ar = varform(sr[]);
set(Ar, solver = sparsesolver);
Vh[int] ur( 2 * bc );
matrix yr(ur.n , ur.n);
computesols(Ar, ur);
forward(yr, ur);

// Iterate over the discretization.
matrix coord(N, disc ^ N);
if (mpirank == 0) {
  for (int k = 0; k < coord.m; k += 1) {
    for (int j; j < coord.n; j++) {
      int batch = k / ( ( disc ^ ( N - j - 1 ) ) );
      int nx = batch % disc;
      coord(j, k) = pos[nx];
    }
  }
}
broadcast(processor(0), coord);
mpiBarrier(mpiCommWorld);

// Generate all the conductivities.
Vh[int] conds(coord.m);
for (int k = mpirank; k < coord.m; k += mpisize) {
  Vh s = 0.0;
  for (int j; j < coord.n; j++) {
    int batch = k / ( ( disc ^ ( N - j - 1 ) ) );
    int nx = batch % disc;
    coord(j, k) = pos[nx];
    s[] += coord(j, k) * masks[j][];
  }
  conds[k] = s;
}
for (int k = 0; k < coord.m; k++) {
  int rnk = k % mpisize;
  broadcast(processor(rnk), conds[k][]);
}
mpiBarrier(mpiCommWorld);
string filename = "examples/feasible_set_" + N + ".txt";
if (dev == 0 && mpirank == 0) {
  ofstream fl(filename);
  fl << coord;
  fl << yr;
}

// Generate NtD map for each coordinate.
matrix[int] ntds(coord.m);
for (int k = mpirank; k < coord.m; k += mpisize) {
  if (mpirank == 0) {
    cout << k << " / " << coord.m << endl;
  }
  matrix A = varform(conds[k][]);
  set(A, solver = sparsesolver);
  Vh[int] u( 2 * bc );
  matrix y(u.n, u.n);
  computesols(A, u);
  forward(y, u);
  ntds[k] = y;
}
for (int k = 0; k < coord.m; k++) {
  int rnk = k % mpisize;
  broadcast(processor(rnk), ntds[k]);
}

// Save result to a file.
if (dev == 0 && mpirank == 0) {
  ofstream fl(filename, append);
  for (int k = 0; k < coord.m; k++) {
    fl << ntds[k];
  }
}

